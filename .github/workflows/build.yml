name: Build MoonrakerHostScanner

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt

  build:
    name: Build for ${{ matrix.target }}
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: windows
            cmd_build: |
              pyinstaller -F -w -n MoonrakerHostScanner --add-data "about.md;." --add-data "icon.ico;." --add-data "icon.png;." --icon "dist/icon.ico" main.py
            out_file_name: MoonrakerHostScanner.exe
            asset_mime: application/vnd.microsoft.portable-executable
          - os: macos-latest
            target: macos
            cmd_build: |
              pyinstaller -F -w -n MoonrakerHostScanner --add-data "about.md:." --add-data "icon.icns:." --add-data "icon.png:." --icon "dist/icon.icns" main.py
              codesign --sign - --force --deep dist/MoonrakerHostScanner.app
              sleep 2
              hdiutil create -volname MoonrakerHostScanner -srcfolder dist/MoonrakerHostScanner.app -ov -format UDZO dist/MoonrakerHostScanner.dmg
            out_file_name: MoonrakerHostScanner.dmg
            asset_mime: application/x-apple-diskimage
          - os: ubuntu-latest
            target: linux
            cmd_build: |
              pyinstaller -F -w -n MoonrakerHostScanner --add-data "about.md:." --add-data "icon.png:." --icon "icon.png" main.py
              gpg --batch --yes --passphrase "testpass" --pinentry-mode loopback \
                  --quick-generate-key "MoonrakerHostScanner <itormyshev@gmail.com>" rsa3072 sign 365
              gpg --batch --yes --passphrase "testpass" --pinentry-mode loopback \
                  --armor --output ./dist/MoonrakerHostScanner.asc --detach-sign ./dist/MoonrakerHostScanner
            out_file_name: MoonrakerHostScanner
            out_file_name_sig: MoonrakerHostScanner.asc
            asset_mime: application/octet-stream
            asset_mime_sig: text/plain

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pillow icnsutil
      - name: Install additional tools (Linux only)
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update && sudo apt-get install -y gpg
      - name: Prepare icons (Windows and macOS)
        run: |
          python - <<'PY'
          from PIL import Image
          import subprocess, sys
          # Создаем ICO для Windows
          img = Image.open("icon.png")
          img.save("dist/icon.ico")
          # Создаем ICNS для macOS
          subprocess.run(["icnsutil", "compose", "dist/icon.icns", "icon.png"], check=True)
          PY
      - name: Build with pyinstaller for ${{ matrix.target }}
        run: ${{ matrix.cmd_build }}
        shell: bash
      - name: Sign artifact (Windows)
        if: matrix.target == 'windows'
        shell: pwsh
        run: |
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=MoonrakerHostScanner" -KeyUsage DigitalSignature -CertStoreLocation Cert:\LocalMachine\My
          Export-PfxCertificate -Cert $cert -FilePath cert.pfx -Password (ConvertTo-SecureString -String "testpassword" -Force -AsPlainText)
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /f cert.pfx /p testpassword /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 ./dist/MoonrakerHostScanner.exe
      - name: Sign artifact (macOS)
        if: matrix.target == 'macos'
        run: echo "Ad-hoc signing completed during build"
        shell: bash
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v4
        with:
          name: release_url
          path: ./release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo "upload_url=$(cat ./release_url/release_url.txt)" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: Upload Release Asset (Main)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.out_file_name }}
          asset_name: ${{ matrix.out_file_name }}
          asset_content_type: ${{ matrix.asset_mime }}
      - name: Upload Release Asset (Signature, Linux only)
        if: matrix.target == 'linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.out_file_name_sig }}
          asset_name: ${{ matrix.out_file_name_sig }}
          asset_content_type: ${{ matrix.asset_mime_sig }}